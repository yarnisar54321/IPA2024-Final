---
- name: Set variable facts
  ansible.builtin.set_fact:
    idrac_ip: "{{ lookup('env', 'IDRAC_IP') }}"
    idrac_user: "{{ lookup('env', 'IDRAC_USER') }}"
    idrac_password: "{{ lookup('env', 'IDRAC_PASSWORD') }}"
    idrac_port: "{{ lookup('env', 'IDRAC_PORT') }}"
    validate_certs: false
    default_password: "calvin"

- name: Checking iDRAC version
  ansible.builtin.include_tasks:
    file: ../_get_server_generation.yml

- name: Export SCP job.
  ansible.builtin.uri: &uri_params
    url: "https://{{ idrac_ip }}:{{ idrac_port }}/redfish/v1\
      /Managers/iDRAC.Embedded.1/Actions\
      /Oem/EID_674_Manager.ExportSystemConfiguration"
    user: "{{ idrac_user }}"
    password: "{{ idrac_password }}"
    method: POST
    body:
      ExportFormat: JSON
      ShareParameters:
        Target: ALL
    validate_certs: false
    body_format: json
    return_content: true
    status_code: 202
    headers: 'Accept=application/json'
    force_basic_auth: true
  register: all_uri_1
  when: model | int <= 16

- name: Export SCP job.
  ansible.builtin.uri:
    <<: *uri_params
    url: "https://{{ idrac_ip }}:{{ idrac_port }}/redfish/v1\
      /Managers/iDRAC.Embedded.1/Actions\
      /Oem/OemManager.ExportSystemConfiguration"
    body:
      ExportFormat: JSON
      ShareParameters:
        Target: [ALL]
  register: all_uri_2
  when: model | int >= 17

- name: Set common SCP job result
  ansible.builtin.set_fact:
    all_uri: >-
      {{
        all_uri_1
        if (
          'all_uri_1' in vars and
          not (all_uri_1.skipped | default(false))
        )
        else all_uri_2
      }}

- name: Get the job ID split
  ansible.builtin.set_fact:
    list_uri_location: "{{ all_uri.location | split('/') }}"

- name: Get the job ID
  ansible.builtin.set_fact:
    export_job_id: "{{ list_uri_location[-1] }}"

- name: Get Exported SCP contents.
  ansible.builtin.uri:
    url: "{{ all_uri.location }}"
    user: "{{ idrac_user }}"
    password: "{{ idrac_password }}"
    return_content: true
    validate_certs: false
    headers:
      Accept: application/json
    force_basic_auth: true
  register: uri_scp_content
  until: not uri_scp_content.failed
  retries: 5
  delay: 15
  no_log: true
