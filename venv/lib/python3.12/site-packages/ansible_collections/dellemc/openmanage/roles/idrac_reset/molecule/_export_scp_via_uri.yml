---
- name: Set variable facts
  ansible.builtin.set_fact:
    scp_oem: "{{ 'EID_674_Manager' if less_than_17g else 'OemManager' }}"

- name: Trigger Export SCP job.
  ansible.builtin.uri:
    url: "https://{{ idrac_ip | ansible.utils.ipwrap }}:{{ idrac_port }}\
      /redfish/v1/Managers/iDRAC.Embedded.1/Actions\
      /Oem/{{ scp_oem }}.ExportSystemConfiguration"
    user: "{{ idrac_user }}"
    password: "{{ idrac_password }}"
    method: POST
    body:
      ExportFormat: XML
      ShareParameters:
        Target: [ALL]
    validate_certs: false
    body_format: json
    return_content: true
    status_code: 202
    headers: 'Accept=application/json'
    force_basic_auth: true
  register: all_uri_export

- name: Track export SCP Job
  ansible.builtin.uri:
    url: "https://{{ idrac_ip | ansible.utils.ipwrap }}:{{ idrac_port }}\
      /redfish/v1/Managers/iDRAC.Embedded.1/Oem/Dell/Jobs\
      /{{ all_uri_export.location | split('/') | last }}"
    user: "{{ idrac_user }}"
    password: "{{ idrac_password }}"
    return_content: true
    validate_certs: false
    headers:
      Accept: application/json
    force_basic_auth: true
  register: uri_scp_job_content
  until: not uri_scp_job_content.json.JobState in ['Running', 'Pending']
  retries: 15
  delay: 30

- name: Assert Export SCP job was successful
  ansible.builtin.assert:
    fail_msg: "Import SCP job was not successful"
    that:
      - uri_scp_job_content.json.JobState == 'Completed'

- name: Download Exported SCP contents
  ansible.builtin.uri:
    url: "{{ all_uri_export.location }}"
    user: "{{ idrac_user }}"
    password: "{{ idrac_password }}"
    return_content: true
    validate_certs: false
    headers:
      Accept: application/json
    force_basic_auth: true
  register: uri_scp_content
