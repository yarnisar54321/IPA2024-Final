releases:
  - name: "Initial Release"
    tag: "v1.0.0"
    version: "1.0.0"
    changes:
      - major_changes:
          - Initial release of the `ravendb.ravendb` collection.
          - Added `ravendb_node` role for setting up RavenDB servers.
          - Added `ravendb_python_client_prerequisites` role for Python dependency management.
          - Added modules:
              - "`ravendb.ravendb.database` to manage RavenDB databases."
              - "`ravendb.ravendb.index` to manage RavenDB indexes and index modes."
              - "`ravendb.ravendb.node` to add nodes to a RavenDB cluster."

  - name: "Compliance & Cosmetic Updates"
    tag: "v1.0.1"
    version: "1.0.1"
    changes:
      - fixed:
          - Updated `issues` field in `galaxy.yml` to point to the collection repo.
          - Removed broken Keep a Changelog URL in `CHANGELOG.md`.
          - Added `attributes` section with `check_mode` support to all modules.
          - Fixed usage of FQCNs in roles and playbooks.
          - Cleaned up unnecessary files - `ansible.cfg`, `inventories/`, etc.
          - Expanded CI matrix: added `stable-2.18`, `stable-2.19`, and `Python 2.7` support.

  - name: "Refactor Node Module & Shared Args"
    tag: "v1.0.2"
    version: "1.0.2"
    changes:
      - changed:
          - Flattened argument structure in `ravendb.ravendb.node` module (removed nested `node:` dictionary).
          - Centralized common arguments (`url`, `database_name`, `certification_path`, `ca_cert_path`) under `module_utils` and `doc_fragments` for reuse across modules.
      - fixed:
          - Ensured all modules properly import and expose shared options from centralized definitions.

  - name: "Encrypted DB &  Cluster Enhancements"
    tag: "v1.0.3"
    version: "1.0.3"
    changes:
      - added:
          - Support for encrypted databases in `ravendb.ravendb.database`:
              - Generate or read encryption keys.
              - Distribute keys across all cluster nodes.
              - Create databases with encryption enabled.
          - Ability to manage database settings via the `ravendb.ravendb.database` module.
          - Joining Let's Encryptâ€“secured nodes into existing RavenDB clusters.